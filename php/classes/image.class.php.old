<?php

class image {
    protected $file;
    
    public function __construct( $file ) {
        $this->file = new stdClass();
        if (is_file($file)) {
            $this->file->name = $file;
        } else {
            throw new Exception("Image does not exist", 1);
        }
    }

    public function getMetadata() {
        $size = getimagesize($this->file->name, $info);
        $this->file->width = $size[0];
        $this->file->height = $size[1];
        $this->file->mime = $size['mime'];

        // if we have IPTC data, read it
        if(isset($info['APP13'])) {
            $iptc = iptcparse($info['APP13']);
        }
        $this->file->captition = isset($iptc['2#120'][0])?$iptc['2#120'][0]:"";
        $this->file->keywords = isset($iptc["2#025"])?$iptc["2#025"]:array();

        // get Exif data - fail silently
        $exif = @exif_read_data($this->file->name);
        $this->file->rotation = isset($exif['Orientation'])?$exif['Orientation']:1;
        $this->file->originaldate = isset($exif['DateTimeOriginal'])?$exif['DateTimeOriginal']:0;
        $this->file->captition = isset($iptc['2#120'][0])?$iptc['2#120'][0]:"";

        // get XML data
        $xmp = $this->getXmpData($this->file->name, 65534);
        preg_match('/xmp:Rating="(\d+)"/', $xmp, $rating);
        $this->file->rating = $rating?$rating[1]:0;

        if ($this->file->originaldate == 0) {
            $this->file->originaldate = filemtime($this->file->name);
        } else {
            list($ymd,$hms) = explode(' ', $this->file->originaldate);
            list ($year, $month, $day) = explode(':', $ymd);
            list ($hour, $minute, $second) = explode(':', $hms);
            $this->file->originaldate = mktime( $hour, $minute, $second, $month, $day, $year );
        }
        // swap variables if we need to adjust for rotation
        if ($this->swapImageCoordinates($this->file->rotation)) {
            list($this->file->width,$this->file->height) = array($this->file->height,$this->file->width);

        }

        return $this->file;
    }


    public function getXmpData($filename, $chunkSize)
    {
        if (!is_int($chunkSize)) {
            throw new RuntimeException('Expected integer value for argument #2 (chunkSize)');
        }
    
        if ($chunkSize < 12) {
            throw new RuntimeException('Chunk size cannot be less than 12 argument #2 (chunkSize)');
        }
    
        if (($file_pointer = fopen($filename, 'r')) === FALSE) {
            throw new RuntimeException('Could not open file for reading');
        }
    
        $startTag = '<x:xmpmeta';
        $endTag = '</x:xmpmeta>';
        $buffer = NULL;
        $hasXmp = FALSE;
    
        while (($chunk = fread($file_pointer, $chunkSize)) !== FALSE) {
            if ($chunk === "") {
                break;
            }
    
            $buffer .= $chunk;
            $startPosition = strpos($buffer, $startTag);
            $endPosition = strpos($buffer, $endTag);
    
            if ($startPosition !== FALSE && $endPosition !== FALSE) {
                $buffer = substr($buffer, $startPosition, $endPosition - $startPosition + 12);
                $hasXmp = TRUE;
                break;
            } elseif ($startPosition !== FALSE) {
                $buffer = substr($buffer, $startPosition);
                $hasXmp = TRUE;
            } elseif (strlen($buffer) > (strlen($startTag) * 2)) {
                $buffer = substr($buffer, strlen($startTag));
            }
        }
    
        fclose($file_pointer);
        return ($hasXmp) ? $buffer : NULL;
    }


  

    
}

?>